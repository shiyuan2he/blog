<<<<<<< HEAD
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[],"Category":[],"Data":[],"Page":[],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}
=======
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/js/navigation.js","path":"js/navigation.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-cyanstyle/source/css/images/body.jpg","path":"css/images/body.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-cyanstyle/._config.yml.swp","hash":"d237558c1aea901295535622e1540236d7795eb6","modified":1494486811000},{"_id":"themes/hexo-theme-cyanstyle/_config.yml","hash":"5a8c180f5eb5338d1d8a77d1a9acbbb10bb9d15c","modified":1494475773000},{"_id":"themes/hexo-theme-cyanstyle/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/README.md","hash":"f06606ee40b88d11f7750b1ab93cad39271504d3","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/package.json","hash":"0e0b80bc8fabfcf44e363fac08d0d34d4ac983b8","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/LICENSE","hash":"450b2b897f0a46934264ca6467ee4ee9145e6095","modified":1494299974000},{"_id":"source/_posts/java基础-1-java安装及环境变量配置.md","hash":"9eb943b9a577570f29f0c0cd909a761d80fef69e","modified":1493294338000},{"_id":"source/_posts/日志管理-1-关于日志的扯淡.md","hash":"d719719aa14e0e16d130ed6165a90ee6e2155b5f","modified":1493293534000},{"_id":"source/_posts/日志管理-2-log4j剖析.md","hash":"e4f3e3e0a2241db4677d0451c6fbf81bf3c0ee12","modified":1493294805000},{"_id":"source/about/index.md","hash":"a0b514791478e6619c0c1e077a60073027a58296","modified":1493117038000},{"_id":"source/_posts/日志管理-3-logback剖析.md","hash":"ca3c2fb22e1ce7415252a4847bbbfd119123f0ee","modified":1493182997000},{"_id":"source/_posts/项目管理-1-maven安装及环境变量配置.md","hash":"50fe3b348f3e3b4a9027e3d278deb8ee2eccc5fd","modified":1493294187000},{"_id":"source/donate/index.md","hash":"a147c90b22b0ed2d5abfbc46a85abb088732a3fe","modified":1493184727000},{"_id":"themes/hexo-theme-cyanstyle/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/layout.ejs","hash":"c6ba9dd8928c46f83e6cb35162505e46de9e1682","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/archive-post.ejs","hash":"663b7c316355ef91634a9bbf7470dcbc14b83f65","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/article.ejs","hash":"ad1a3b893858df2610e2eadf1eae5cf45b2b3c37","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/after-footer.ejs","hash":"3dc581a50c0af3d41127d799b1044ea1d5233542","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/archive.ejs","hash":"bb0b0b0a729478b0d428fd7d54f37e93d74004ee","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/footer.ejs","hash":"8f21bffe029f5938d5732dafa333fa94771f3ac0","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/comment.ejs","hash":"9c00634e41d531df23d1b0df2bff2321e34b9ec5","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/head.ejs","hash":"61a6ff99cd7f31dfbe7a925f7664c8f8be6c0803","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/header.ejs","hash":"f1732bca4c5e4a11027cbf300497939507436232","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_widget/archive.ejs","hash":"3cb67a156855435ddf50fa6082b34d8e21f7c52b","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/sidebar.ejs","hash":"b9295e2d892df9dffec829859b02281667f85cc1","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_widget/category.ejs","hash":"55377d96929eba1d6ece9cc06b07a34323909092","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_widget/music.ejs","hash":"4a87ab9604e5eb9698c1d7e64c5b542f7d927ce5","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_widget/recent_posts.ejs","hash":"ac5682bb66c8fc07e1d1011c93f29c617eab9d34","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_widget/tagcloud.ejs","hash":"ebe3b3d32fce2e9154d333e859f26ed64748327f","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_widget/search.ejs","hash":"b5376aed197fcd989e4a413151aba29af845073e","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_widget/tag.ejs","hash":"a62e83cb0214016d2ca2a6e21455e601c8a201eb","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/css/style.css","hash":"d6568d25ce8bd84b6ce45b16f628edf97df9a111","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/js/script.js","hash":"dc57599cf47b6a068f6bbc899aad6fda4576b6ae","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/js/navigation.js","hash":"1149f4a86285fb1cbf08f3748659368410be6892","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/post/category.ejs","hash":"8e086ae9864d487d6183ac6e16b92fb35a68639b","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/js/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/post/date.ejs","hash":"69785676b6f09a028c75170f3f2d1cb143af9be6","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/post/nav.ejs","hash":"2a7cfa6b3ab280d93ae0b4ba8ae3da9b04c80682","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/post/tag.ejs","hash":"ae103b5970c77299547f269b54d046bcc8f38251","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/layout/_partial/post/title.ejs","hash":"97d01c3ff12453d76edf5af31dfed9859b3efc5b","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/css/images/favicon.ico","hash":"b5b7667c7358e7300c4772d481e556b003716dab","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494299974000},{"_id":"themes/hexo-theme-cyanstyle/source/css/images/body.jpg","hash":"92743ba769bb7a7de8e93a418ed36c89e60bc639","modified":1494299974000}],"Category":[{"name":"小白入门篇-java","_id":"cj2k2wdnb0004tgfyj4hdvvjj"},{"name":"日志管理之美","_id":"cj2k2wdnm0009tgfylb3x899b"},{"name":"项目管理利器-maven","_id":"cj2k2wdnt000ltgfyxv3fopr9"}],"Data":[],"Page":[{"title":"about","date":"2017-04-25T10:43:58.000Z","_content":"## 关于我\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-25 18:43:58\n---\n## 关于我\n\n","updated":"2017-05-11T07:42:29.000Z","path":"about/index.html","_id":"cj2k2wdn50001tgfy24vrf9q7","comments":1,"layout":"page","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2>"},{"title":"donate","date":"2017-04-26T05:32:07.000Z","_content":"","source":"donate/index.md","raw":"---\ntitle: donate\ndate: 2017-04-26 13:32:07\n---\n","updated":"2017-04-26T05:32:07.000Z","path":"donate/index.html","comments":1,"layout":"page","_id":"cj2k2wdna0003tgfy3x2z572s","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"java基础-1-java安装及环境变量配置","date":"2017-04-27T11:26:20.000Z","_content":"Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点。\n<!-- more -->\n\t由于没有修改/etc/profile的权限，故此处采用单独用户配置\n\t1.打开terminal或者iterm，输入java -version查看系统是否已经安装过jdk\n\t2.下载jdk mac版\n\t（http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html）\n\t3.安装完之后，cd /Library/Java/JavaVirtualMachines/  查看jdk安装情况\n\t4.vim ~/.bash_profile 输入以下代码\n\t\tAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home\n\t\tPATH=$JAVA_HOME/bin:$PATH\n\t\texport JAVA_HOME\n\t\texport PATH\n\t5.输入 source ~/.bash_profile 使配置文件生效\n\t6.输入 java -version查看安装是否成功\n\t如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！\n","source":"_posts/java基础-1-java安装及环境变量配置.md","raw":"---\ntitle: java基础-1-java安装及环境变量配置\ndate: 2017-04-27 19:26:20\ntags: java\ncategories: 小白入门篇-java\n---\nJava具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点。\n<!-- more -->\n\t由于没有修改/etc/profile的权限，故此处采用单独用户配置\n\t1.打开terminal或者iterm，输入java -version查看系统是否已经安装过jdk\n\t2.下载jdk mac版\n\t（http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html）\n\t3.安装完之后，cd /Library/Java/JavaVirtualMachines/  查看jdk安装情况\n\t4.vim ~/.bash_profile 输入以下代码\n\t\tAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home\n\t\tPATH=$JAVA_HOME/bin:$PATH\n\t\texport JAVA_HOME\n\t\texport PATH\n\t5.输入 source ~/.bash_profile 使配置文件生效\n\t6.输入 java -version查看安装是否成功\n\t如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！\n","slug":"java基础-1-java安装及环境变量配置","published":1,"updated":"2017-04-27T11:58:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k2wdn10000tgfy8pqphdo5","content":"<p>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点。<br><a id=\"more\"></a><br>    由于没有修改/etc/profile的权限，故此处采用单独用户配置<br>    1.打开terminal或者iterm，输入java -version查看系统是否已经安装过jdk<br>    2.下载jdk mac版<br>    （<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html）\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html）</a><br>    3.安装完之后，cd /Library/Java/JavaVirtualMachines/  查看jdk安装情况<br>    4.vim ~/.bash_profile 输入以下代码<br>        AVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home<br>        PATH=$JAVA_HOME/bin:$PATH<br>        export JAVA_HOME<br>        export PATH<br>    5.输入 source ~/.bash_profile 使配置文件生效<br>    6.输入 java -version查看安装是否成功<br>    如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！</p>\n","site":{"data":{}},"excerpt":"<p>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点。<br>","more":"<br>    由于没有修改/etc/profile的权限，故此处采用单独用户配置<br>    1.打开terminal或者iterm，输入java -version查看系统是否已经安装过jdk<br>    2.下载jdk mac版<br>    （<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html）\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html）</a><br>    3.安装完之后，cd /Library/Java/JavaVirtualMachines/  查看jdk安装情况<br>    4.vim ~/.bash_profile 输入以下代码<br>        AVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home<br>        PATH=$JAVA_HOME/bin:$PATH<br>        export JAVA_HOME<br>        export PATH<br>    5.输入 source ~/.bash_profile 使配置文件生效<br>    6.输入 java -version查看安装是否成功<br>    如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！</p>"},{"title":"(日志管理-2)log4j剖析","date":"2017-04-26T03:31:25.000Z","_content":"    Log4J的配置文件就是用来设置记录器的级别、存放器和布局的，它可接key=value格式的设置\n或xml格式的设置信息。通过配置，可以创建出Log4J的运行环境。log4j.properties ==> src同级创建并设置log4j.properties\n　　log4j.rootLogger = 日志级别，appender1, appender2,...\n\n　　　　日志级别：ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF，不区分大小写\n\n　　　　注意，需在控制台输入，只需将其中一个appender定义为stdout即可\n　　　　注意，rootLogger默认是对整个工程生效\n　　　　注意，如果只想对某些包操作，\n\t\t那么：log4j.logger.hsy.utils = info, stdout，表示该日志对package hsy.util生效\n　　　　注意，这样做可以区分dev/线上，也可以减小性能影响：if(log.isDebugEnabled()){log.debug();}\n　　　　-----------------------\n\n　　　　log4j.appender.appender1 = org.apache.log4j.日志输出到哪儿\n　　　　　　ConsoleAppender（控制台）\n　　　　　　FileAppender（文件）\n　　　　　　DailyRollingFileAppender（每天产生一个日志文件）\n　　　　　　RollingFileAppender（文件大小到达指定尺寸时产生一个新的文件）\n　　　　　　WriteAppender（将日志信息以流格式发送到任意指定的地方）\n　　　　　　JDBCAppender（将日志信息保存到数据库中）\n　　　　　　log4j.appender.appender1.File=文件目录及文件\n　　　　    log4j.appender.appender1.MaxFileSize=最大文件大小\n　　　　    log4j.appender.appender1.MaxBackupIndex=备份文件个数\n\n　　　　其中，appender1是在第一行定义过的；\n　　　　文件目录及文件，例如，/home/admin/logs/jar/debug.log\n\t最大文件大小，例如，100KB\n　　　　备份文件个数，例如，1\n\n　　　　-----------------\n　　　　log4j.appender.ServerDailyRollingFile.DatePattern=日志后缀格式\n　　　　例如，'.'yyyy-MM-dd\n　　　　　　log4j.appender.appender1.layout=org.apache.log4j.日志布局格式\n　　　　　　HTMLLayout（以HTML表格形式布局）\n　　　　　　SimpleLayout（包含日志信息的级别和信息字符串）\n　　　　　　TTCCLayout（包含日志产生的时间，执行绪，类别等信息）\n　　　　　　PatternLayout（可以灵活的指定布局格式，常用）\n　　　　------------------\n　　　　log4j.appender.appender1.layout.ConversionPattern=日志输出格式\n　　　　打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:\n　　　　例如，%d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n\n　　　　　　%c 输出日志信息所属的类的全名\n　　　　　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，\n\t\t比如：%d{yyy-M-dd HH:mm:ss SSS}，输出类似：2002-10-18 22:10:28,673\n　　　　　　%f 输出日志信息所属的类的类名\n　　　　　　%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行\n　　　　　　%m 输出代码中指定的信息，如log(message)中的message\n　　　　　　%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”\n　　　　　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。\n\t\t如果是调用debug()输出的，则为DEBUG，依此类推\n　　　　　　%r 输出自应用启动到输出该日志信息所耗费的毫秒数\n　　　　　　%t 输出产生该日志事件的线程名\n　　　　　　-----------------\n　　　　　　log4j.appender.ServerDailyRollingFile.Append=true\n　　　　　　不解释，追加往后写便是\n　　　　　　总结一下：\n　　　　　　　　Logger类：完成日志记录，设置日志信息级别\n　　　　　　　　Appender类：决定日志去向，终端、DB、硬盘\n　　　　　　　　Layout类：决定日志输出的样式，例如包含当前线程、行号、时间\n　　　　　　　　------------------\n　　　　　　　　在代码中使用log4j，初始化Logger:\n　　　　　　　　　　1）在程序中调用BasicConfigurator.configure()方法：\n\t\t\t给根记录器增加一个ConsoleAppender，\n\t\t\t输出格式通过PatternLayout设为\"%-4r [%t] %-5p %c %x - %m%n\"，\n\t\t\t还有根记录器的默认级别是Level.DEBUG.\n　　　　　　　　　　2）配置放在文件里，通过命令行参数传递文件名字，\n\t\t\t通过PropertyConfigurator.configure(args[x])解析并配置；\n　　　　　　　　　　3）配置放在文件里，通过环境变量传递文件名等信息，\n\t\t\t利用log4j默认的初始化过程解析并配置；\n　　　　　　　　　　4）配置放在文件里，通过应用服务器配置传递文件名等信息，\n\t\t\t利用一个特殊的servlet来完成配置。\n\t　　　　--------------------------------------------------------------------------\n　　　　　　　　3. 为不同的 Appender 设置日志输出级别：\n　　　　　　　　　　当调试系统时，我们往往注意的只是异常级别的日志输出，\n\t\t\t但是通常所有级别的输出都是放在一个文件里的，\n\t\t\t如果日志输出的级别是BUG！？那就慢慢去找吧。\n　　　　　　　　　　这时我们也许会想要是能把异常信息单独输出到一个文件里该多好啊。\n\t\t\t当然可以，Log4j已经提供了这样的功能，我们只需要在配置中修改Appender的\n\t\tThreshold 就能实现,比如下面的例子：\n　　　　　　　　[配置文件]\n　　　　　　　　　　### set log levels ###\n　　　　　　　　　　log4j.rootLogger = debug , stdout , D , E\n\n　　　　　　　　　　### 输出到控制台 ###\n　　　　　　　　　　log4j.appender.stdout = org.apache.log4j.ConsoleAppender\n　　　　　　　　　　log4j.appender.stdout.Target = System.out\n　　　　　　　　　　log4j.appender.stdout.layout = org.apache.log4j.PatternLayout\n　　　　　　　　　　log4j.appender.stdout.layout.ConversionPattern = \n\t\t\t\t%d{ABSOLUTE} %5p %c{ 1 }:%L - %m%n\n\n　　　　　　　　　　### 输出到日志文件 ###\n　　　　　　　　　　log4j.appender.D = org.apache.log4j.DailyRollingFileAppender\n　　　　　　　　　　log4j.appender.D.File = logs/log.log\n　　　　　　　　　　log4j.appender.D.Append = true\n　　　　　　　　　　log4j.appender.D.Threshold = DEBUG ## 输出DEBUG级别以上的日志\n　　　　　　　　　　log4j.appender.D.layout = org.apache.log4j.PatternLayout\n　　　　　　　　　　log4j.appender.D.layout.ConversionPattern = \n\t\t\t\t%-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n\n\n　　　　　　　　　　### 保存异常信息到单独文件 ###\n　　　　　　　　　　log4j.appender.D = org.apache.log4j.DailyRollingFileAppender\n　　　　　　　　　　log4j.appender.D.File = logs/error.log ## 异常日志文件名\n　　　　　　　　　　log4j.appender.D.Append = true\n　　　　　　　　　　log4j.appender.D.Threshold = ERROR ## 只输出ERROR级别以上的日志!!!\n　　　　　　　　　　log4j.appender.D.layout = org.apache.log4j.PatternLayout\n　　　　　　　　　　log4j.appender.D.layout.ConversionPattern = \n\t\t\t\t%-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n\n\n　　　　　　　　　　[代码中使用]\n　　　　　　　　　　public class TestLog4j {\n　　　　　　　　　　　　public static void main(String[] args) {\n　　　　　　　　　　　　　　PropertyConfigurator.configure( \" D:/Code/conf/log4j.properties \" );\n　　　　　　　　　　　　　　Logger logger = Logger.getLogger(TestLog4j. class );\n\t　　　　　　　　　　logger.debug( \" debug \" );\n　　　　　　　　　　　　　　logger.error( \" error \" );\n　　　　　　　　　　　　}\n　　　　　　　　　　}\n　　　　　　-----------------------------------------------------------------------------------\n　　　　　　public class Test {\n　　　　　　　　private static Logger logger = Logger.getLogger(Test.class);\n　　　　　　　　public static void main(String[] args) {\n　　　　　　　　　　// System.out.println(\"This is println message.\");\n\n　　　　　　　　　　// 记录debug级别的信息\n　　　　　　　　　　logger.debug(\"This is debug message.\");\n　　　　　　　　　　// 记录info级别的信息\n　　　　　　　　　　ogger.info(\"This is info message.\");\n　　　　　　　　　　// 记录error级别的信息\n　　　　　　　　　　logger.error(\"This is error message.\");\n　　　　　　　　}\n　　　　　　}\n　　　　-----------------------------------------------------------------------------\n　　　　最后粘上本人用的测试log4j的配置文件内容，仅供参考。希望对您有所帮助\n　　　　　　log4j.rootLogger=INFO, stdout, file\n\n　　　　　　log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n　　　　　　log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n　　　　　　log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n\n\n　　　　　　log4j.appender.file=org.apache.log4j.DailyRollingFileAppender\n　　　　　　log4j.appender.file.Threshold=debug\n　　　　　　log4j.appender.file.layout=org.apache.log4j.PatternLayout\n　　　　　　log4j.appender.file.layout.ConversionPattern= %d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n\n　　　　　　log4j.appender.file.File=D:/others/logs/jar/debug.log\n　　　　　　#log4j.appender.file.File=/home/test_zzs_dzfp/logs/zzssl/zzssl.log\n　　　　　　log4j.appender.file.MaxFileSize=200MB\n　　　　　　log4j.appender.file.MaxBackupIndex=20\n\n　　　　　　#project defalult level\n　　　　　　#log4j.logger.hsy.utils=INFO\n\n","source":"_posts/日志管理-2-log4j剖析.md","raw":"---\ntitle: (日志管理-2)log4j剖析\ndate: 2017-04-26 11:31:25\ncategories: 日志管理之美\ntags: log4j,java,日志,logback\n---\n    Log4J的配置文件就是用来设置记录器的级别、存放器和布局的，它可接key=value格式的设置\n或xml格式的设置信息。通过配置，可以创建出Log4J的运行环境。log4j.properties ==> src同级创建并设置log4j.properties\n　　log4j.rootLogger = 日志级别，appender1, appender2,...\n\n　　　　日志级别：ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF，不区分大小写\n\n　　　　注意，需在控制台输入，只需将其中一个appender定义为stdout即可\n　　　　注意，rootLogger默认是对整个工程生效\n　　　　注意，如果只想对某些包操作，\n\t\t那么：log4j.logger.hsy.utils = info, stdout，表示该日志对package hsy.util生效\n　　　　注意，这样做可以区分dev/线上，也可以减小性能影响：if(log.isDebugEnabled()){log.debug();}\n　　　　-----------------------\n\n　　　　log4j.appender.appender1 = org.apache.log4j.日志输出到哪儿\n　　　　　　ConsoleAppender（控制台）\n　　　　　　FileAppender（文件）\n　　　　　　DailyRollingFileAppender（每天产生一个日志文件）\n　　　　　　RollingFileAppender（文件大小到达指定尺寸时产生一个新的文件）\n　　　　　　WriteAppender（将日志信息以流格式发送到任意指定的地方）\n　　　　　　JDBCAppender（将日志信息保存到数据库中）\n　　　　　　log4j.appender.appender1.File=文件目录及文件\n　　　　    log4j.appender.appender1.MaxFileSize=最大文件大小\n　　　　    log4j.appender.appender1.MaxBackupIndex=备份文件个数\n\n　　　　其中，appender1是在第一行定义过的；\n　　　　文件目录及文件，例如，/home/admin/logs/jar/debug.log\n\t最大文件大小，例如，100KB\n　　　　备份文件个数，例如，1\n\n　　　　-----------------\n　　　　log4j.appender.ServerDailyRollingFile.DatePattern=日志后缀格式\n　　　　例如，'.'yyyy-MM-dd\n　　　　　　log4j.appender.appender1.layout=org.apache.log4j.日志布局格式\n　　　　　　HTMLLayout（以HTML表格形式布局）\n　　　　　　SimpleLayout（包含日志信息的级别和信息字符串）\n　　　　　　TTCCLayout（包含日志产生的时间，执行绪，类别等信息）\n　　　　　　PatternLayout（可以灵活的指定布局格式，常用）\n　　　　------------------\n　　　　log4j.appender.appender1.layout.ConversionPattern=日志输出格式\n　　　　打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:\n　　　　例如，%d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n\n　　　　　　%c 输出日志信息所属的类的全名\n　　　　　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，\n\t\t比如：%d{yyy-M-dd HH:mm:ss SSS}，输出类似：2002-10-18 22:10:28,673\n　　　　　　%f 输出日志信息所属的类的类名\n　　　　　　%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行\n　　　　　　%m 输出代码中指定的信息，如log(message)中的message\n　　　　　　%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”\n　　　　　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。\n\t\t如果是调用debug()输出的，则为DEBUG，依此类推\n　　　　　　%r 输出自应用启动到输出该日志信息所耗费的毫秒数\n　　　　　　%t 输出产生该日志事件的线程名\n　　　　　　-----------------\n　　　　　　log4j.appender.ServerDailyRollingFile.Append=true\n　　　　　　不解释，追加往后写便是\n　　　　　　总结一下：\n　　　　　　　　Logger类：完成日志记录，设置日志信息级别\n　　　　　　　　Appender类：决定日志去向，终端、DB、硬盘\n　　　　　　　　Layout类：决定日志输出的样式，例如包含当前线程、行号、时间\n　　　　　　　　------------------\n　　　　　　　　在代码中使用log4j，初始化Logger:\n　　　　　　　　　　1）在程序中调用BasicConfigurator.configure()方法：\n\t\t\t给根记录器增加一个ConsoleAppender，\n\t\t\t输出格式通过PatternLayout设为\"%-4r [%t] %-5p %c %x - %m%n\"，\n\t\t\t还有根记录器的默认级别是Level.DEBUG.\n　　　　　　　　　　2）配置放在文件里，通过命令行参数传递文件名字，\n\t\t\t通过PropertyConfigurator.configure(args[x])解析并配置；\n　　　　　　　　　　3）配置放在文件里，通过环境变量传递文件名等信息，\n\t\t\t利用log4j默认的初始化过程解析并配置；\n　　　　　　　　　　4）配置放在文件里，通过应用服务器配置传递文件名等信息，\n\t\t\t利用一个特殊的servlet来完成配置。\n\t　　　　--------------------------------------------------------------------------\n　　　　　　　　3. 为不同的 Appender 设置日志输出级别：\n　　　　　　　　　　当调试系统时，我们往往注意的只是异常级别的日志输出，\n\t\t\t但是通常所有级别的输出都是放在一个文件里的，\n\t\t\t如果日志输出的级别是BUG！？那就慢慢去找吧。\n　　　　　　　　　　这时我们也许会想要是能把异常信息单独输出到一个文件里该多好啊。\n\t\t\t当然可以，Log4j已经提供了这样的功能，我们只需要在配置中修改Appender的\n\t\tThreshold 就能实现,比如下面的例子：\n　　　　　　　　[配置文件]\n　　　　　　　　　　### set log levels ###\n　　　　　　　　　　log4j.rootLogger = debug , stdout , D , E\n\n　　　　　　　　　　### 输出到控制台 ###\n　　　　　　　　　　log4j.appender.stdout = org.apache.log4j.ConsoleAppender\n　　　　　　　　　　log4j.appender.stdout.Target = System.out\n　　　　　　　　　　log4j.appender.stdout.layout = org.apache.log4j.PatternLayout\n　　　　　　　　　　log4j.appender.stdout.layout.ConversionPattern = \n\t\t\t\t%d{ABSOLUTE} %5p %c{ 1 }:%L - %m%n\n\n　　　　　　　　　　### 输出到日志文件 ###\n　　　　　　　　　　log4j.appender.D = org.apache.log4j.DailyRollingFileAppender\n　　　　　　　　　　log4j.appender.D.File = logs/log.log\n　　　　　　　　　　log4j.appender.D.Append = true\n　　　　　　　　　　log4j.appender.D.Threshold = DEBUG ## 输出DEBUG级别以上的日志\n　　　　　　　　　　log4j.appender.D.layout = org.apache.log4j.PatternLayout\n　　　　　　　　　　log4j.appender.D.layout.ConversionPattern = \n\t\t\t\t%-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n\n\n　　　　　　　　　　### 保存异常信息到单独文件 ###\n　　　　　　　　　　log4j.appender.D = org.apache.log4j.DailyRollingFileAppender\n　　　　　　　　　　log4j.appender.D.File = logs/error.log ## 异常日志文件名\n　　　　　　　　　　log4j.appender.D.Append = true\n　　　　　　　　　　log4j.appender.D.Threshold = ERROR ## 只输出ERROR级别以上的日志!!!\n　　　　　　　　　　log4j.appender.D.layout = org.apache.log4j.PatternLayout\n　　　　　　　　　　log4j.appender.D.layout.ConversionPattern = \n\t\t\t\t%-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n\n\n　　　　　　　　　　[代码中使用]\n　　　　　　　　　　public class TestLog4j {\n　　　　　　　　　　　　public static void main(String[] args) {\n　　　　　　　　　　　　　　PropertyConfigurator.configure( \" D:/Code/conf/log4j.properties \" );\n　　　　　　　　　　　　　　Logger logger = Logger.getLogger(TestLog4j. class );\n\t　　　　　　　　　　logger.debug( \" debug \" );\n　　　　　　　　　　　　　　logger.error( \" error \" );\n　　　　　　　　　　　　}\n　　　　　　　　　　}\n　　　　　　-----------------------------------------------------------------------------------\n　　　　　　public class Test {\n　　　　　　　　private static Logger logger = Logger.getLogger(Test.class);\n　　　　　　　　public static void main(String[] args) {\n　　　　　　　　　　// System.out.println(\"This is println message.\");\n\n　　　　　　　　　　// 记录debug级别的信息\n　　　　　　　　　　logger.debug(\"This is debug message.\");\n　　　　　　　　　　// 记录info级别的信息\n　　　　　　　　　　ogger.info(\"This is info message.\");\n　　　　　　　　　　// 记录error级别的信息\n　　　　　　　　　　logger.error(\"This is error message.\");\n　　　　　　　　}\n　　　　　　}\n　　　　-----------------------------------------------------------------------------\n　　　　最后粘上本人用的测试log4j的配置文件内容，仅供参考。希望对您有所帮助\n　　　　　　log4j.rootLogger=INFO, stdout, file\n\n　　　　　　log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n　　　　　　log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n　　　　　　log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n\n\n　　　　　　log4j.appender.file=org.apache.log4j.DailyRollingFileAppender\n　　　　　　log4j.appender.file.Threshold=debug\n　　　　　　log4j.appender.file.layout=org.apache.log4j.PatternLayout\n　　　　　　log4j.appender.file.layout.ConversionPattern= %d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n\n　　　　　　log4j.appender.file.File=D:/others/logs/jar/debug.log\n　　　　　　#log4j.appender.file.File=/home/test_zzs_dzfp/logs/zzssl/zzssl.log\n　　　　　　log4j.appender.file.MaxFileSize=200MB\n　　　　　　log4j.appender.file.MaxBackupIndex=20\n\n　　　　　　#project defalult level\n　　　　　　#log4j.logger.hsy.utils=INFO\n\n","slug":"日志管理-2-log4j剖析","published":1,"updated":"2017-04-27T12:06:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k2wdn70002tgfybwyq4niz","content":"<pre><code>Log4J的配置文件就是用来设置记录器的级别、存放器和布局的，它可接key=value格式的设置\n</code></pre><p>或xml格式的设置信息。通过配置，可以创建出Log4J的运行环境。log4j.properties ==&gt; src同级创建并设置log4j.properties<br>　　log4j.rootLogger = 日志级别，appender1, appender2,…</p>\n<p>　　　　日志级别：ALL &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF，不区分大小写</p>\n<p>　　　　注意，需在控制台输入，只需将其中一个appender定义为stdout即可<br>　　　　注意，rootLogger默认是对整个工程生效<br>　　　　注意，如果只想对某些包操作，<br>        那么：log4j.logger.hsy.utils = info, stdout，表示该日志对package hsy.util生效<br>　　　　注意，这样做可以区分dev/线上，也可以减小性能影响：if(log.isDebugEnabled()){log.debug();}<br>　　　　———————–</p>\n<p>　　　　log4j.appender.appender1 = org.apache.log4j.日志输出到哪儿<br>　　　　　　ConsoleAppender（控制台）<br>　　　　　　FileAppender（文件）<br>　　　　　　DailyRollingFileAppender（每天产生一个日志文件）<br>　　　　　　RollingFileAppender（文件大小到达指定尺寸时产生一个新的文件）<br>　　　　　　WriteAppender（将日志信息以流格式发送到任意指定的地方）<br>　　　　　　JDBCAppender（将日志信息保存到数据库中）<br>　　　　　　log4j.appender.appender1.File=文件目录及文件<br>　　　　    log4j.appender.appender1.MaxFileSize=最大文件大小<br>　　　　    log4j.appender.appender1.MaxBackupIndex=备份文件个数</p>\n<p>　　　　其中，appender1是在第一行定义过的；<br>　　　　文件目录及文件，例如，/home/admin/logs/jar/debug.log<br>    最大文件大小，例如，100KB<br>　　　　备份文件个数，例如，1</p>\n<p>　　　　—————–<br>　　　　log4j.appender.ServerDailyRollingFile.DatePattern=日志后缀格式<br>　　　　例如，’.’yyyy-MM-dd<br>　　　　　　log4j.appender.appender1.layout=org.apache.log4j.日志布局格式<br>　　　　　　HTMLLayout（以HTML表格形式布局）<br>　　　　　　SimpleLayout（包含日志信息的级别和信息字符串）<br>　　　　　　TTCCLayout（包含日志产生的时间，执行绪，类别等信息）<br>　　　　　　PatternLayout（可以灵活的指定布局格式，常用）<br>　　　　——————<br>　　　　log4j.appender.appender1.layout.ConversionPattern=日志输出格式<br>　　　　打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:<br>　　　　例如，%d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n<br>　　　　　　%c 输出日志信息所属的类的全名<br>　　　　　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，<br>        比如：%d{yyy-M-dd HH:mm:ss SSS}，输出类似：2002-10-18 22:10:28,673<br>　　　　　　%f 输出日志信息所属的类的类名<br>　　　　　　%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行<br>　　　　　　%m 输出代码中指定的信息，如log(message)中的message<br>　　　　　　%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”<br>　　　　　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。<br>        如果是调用debug()输出的，则为DEBUG，依此类推<br>　　　　　　%r 输出自应用启动到输出该日志信息所耗费的毫秒数<br>　　　　　　%t 输出产生该日志事件的线程名<br>　　　　　　—————–<br>　　　　　　log4j.appender.ServerDailyRollingFile.Append=true<br>　　　　　　不解释，追加往后写便是<br>　　　　　　总结一下：<br>　　　　　　　　Logger类：完成日志记录，设置日志信息级别<br>　　　　　　　　Appender类：决定日志去向，终端、DB、硬盘<br>　　　　　　　　Layout类：决定日志输出的样式，例如包含当前线程、行号、时间<br>　　　　　　　　——————<br>　　　　　　　　在代码中使用log4j，初始化Logger:<br>　　　　　　　　　　1）在程序中调用BasicConfigurator.configure()方法：<br>            给根记录器增加一个ConsoleAppender，<br>            输出格式通过PatternLayout设为”%-4r [%t] %-5p %c %x - %m%n”，<br>            还有根记录器的默认级别是Level.DEBUG.<br>　　　　　　　　　　2）配置放在文件里，通过命令行参数传递文件名字，<br>            通过PropertyConfigurator.configure(args[x])解析并配置；<br>　　　　　　　　　　3）配置放在文件里，通过环境变量传递文件名等信息，<br>            利用log4j默认的初始化过程解析并配置；<br>　　　　　　　　　　4）配置放在文件里，通过应用服务器配置传递文件名等信息，<br>            利用一个特殊的servlet来完成配置。<br>    　　　　————————————————————————–<br>　　　　　　　　3. 为不同的 Appender 设置日志输出级别：<br>　　　　　　　　　　当调试系统时，我们往往注意的只是异常级别的日志输出，<br>            但是通常所有级别的输出都是放在一个文件里的，<br>            如果日志输出的级别是BUG！？那就慢慢去找吧。<br>　　　　　　　　　　这时我们也许会想要是能把异常信息单独输出到一个文件里该多好啊。<br>            当然可以，Log4j已经提供了这样的功能，我们只需要在配置中修改Appender的<br>        Threshold 就能实现,比如下面的例子：<br>　　　　　　　　[配置文件]<br>　　　　　　　　　　### set log levels ###<br>　　　　　　　　　　log4j.rootLogger = debug , stdout , D , E</p>\n<p>　　　　　　　　　　### 输出到控制台 ###<br>　　　　　　　　　　log4j.appender.stdout = org.apache.log4j.ConsoleAppender<br>　　　　　　　　　　log4j.appender.stdout.Target = System.out<br>　　　　　　　　　　log4j.appender.stdout.layout = org.apache.log4j.PatternLayout<br>　　　　　　　　　　log4j.appender.stdout.layout.ConversionPattern =<br>                %d{ABSOLUTE} %5p %c{ 1 }:%L - %m%n</p>\n<p>　　　　　　　　　　### 输出到日志文件 ###<br>　　　　　　　　　　log4j.appender.D = org.apache.log4j.DailyRollingFileAppender<br>　　　　　　　　　　log4j.appender.D.File = logs/log.log<br>　　　　　　　　　　log4j.appender.D.Append = true<br>　　　　　　　　　　log4j.appender.D.Threshold = DEBUG ## 输出DEBUG级别以上的日志<br>　　　　　　　　　　log4j.appender.D.layout = org.apache.log4j.PatternLayout<br>　　　　　　　　　　log4j.appender.D.layout.ConversionPattern =<br>                %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n</p>\n<p>　　　　　　　　　　### 保存异常信息到单独文件 ###<br>　　　　　　　　　　log4j.appender.D = org.apache.log4j.DailyRollingFileAppender<br>　　　　　　　　　　log4j.appender.D.File = logs/error.log ## 异常日志文件名<br>　　　　　　　　　　log4j.appender.D.Append = true<br>　　　　　　　　　　log4j.appender.D.Threshold = ERROR ## 只输出ERROR级别以上的日志!!!<br>　　　　　　　　　　log4j.appender.D.layout = org.apache.log4j.PatternLayout<br>　　　　　　　　　　log4j.appender.D.layout.ConversionPattern =<br>                %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n</p>\n<p>　　　　　　　　　　[代码中使用]<br>　　　　　　　　　　public class TestLog4j {<br>　　　　　　　　　　　　public static void main(String[] args) {<br>　　　　　　　　　　　　　　PropertyConfigurator.configure( “ D:/Code/conf/log4j.properties “ );<br>　　　　　　　　　　　　　　Logger logger = Logger.getLogger(TestLog4j. class );<br>    　　　　　　　　　　logger.debug( “ debug “ );<br>　　　　　　　　　　　　　　logger.error( “ error “ );<br>　　　　　　　　　　　　}<br>　　　　　　　　　　}<br>　　　　　　———————————————————————————–<br>　　　　　　public class Test {<br>　　　　　　　　private static Logger logger = Logger.getLogger(Test.class);<br>　　　　　　　　public static void main(String[] args) {<br>　　　　　　　　　　// System.out.println(“This is println message.”);</p>\n<p>　　　　　　　　　　// 记录debug级别的信息<br>　　　　　　　　　　logger.debug(“This is debug message.”);<br>　　　　　　　　　　// 记录info级别的信息<br>　　　　　　　　　　ogger.info(“This is info message.”);<br>　　　　　　　　　　// 记录error级别的信息<br>　　　　　　　　　　logger.error(“This is error message.”);<br>　　　　　　　　}<br>　　　　　　}<br>　　　　—————————————————————————–<br>　　　　最后粘上本人用的测试log4j的配置文件内容，仅供参考。希望对您有所帮助<br>　　　　　　log4j.rootLogger=INFO, stdout, file</p>\n<p>　　　　　　log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br>　　　　　　log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br>　　　　　　log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n</p>\n<p>　　　　　　log4j.appender.file=org.apache.log4j.DailyRollingFileAppender<br>　　　　　　log4j.appender.file.Threshold=debug<br>　　　　　　log4j.appender.file.layout=org.apache.log4j.PatternLayout<br>　　　　　　log4j.appender.file.layout.ConversionPattern= %d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n<br>　　　　　　log4j.appender.file.File=D:/others/logs/jar/debug.log<br>　　　　　　#log4j.appender.file.File=/home/test_zzs_dzfp/logs/zzssl/zzssl.log<br>　　　　　　log4j.appender.file.MaxFileSize=200MB<br>　　　　　　log4j.appender.file.MaxBackupIndex=20</p>\n<p>　　　　　　#project defalult level<br>　　　　　　#log4j.logger.hsy.utils=INFO</p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>Log4J的配置文件就是用来设置记录器的级别、存放器和布局的，它可接key=value格式的设置\n</code></pre><p>或xml格式的设置信息。通过配置，可以创建出Log4J的运行环境。log4j.properties ==&gt; src同级创建并设置log4j.properties<br>　　log4j.rootLogger = 日志级别，appender1, appender2,…</p>\n<p>　　　　日志级别：ALL &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF，不区分大小写</p>\n<p>　　　　注意，需在控制台输入，只需将其中一个appender定义为stdout即可<br>　　　　注意，rootLogger默认是对整个工程生效<br>　　　　注意，如果只想对某些包操作，<br>        那么：log4j.logger.hsy.utils = info, stdout，表示该日志对package hsy.util生效<br>　　　　注意，这样做可以区分dev/线上，也可以减小性能影响：if(log.isDebugEnabled()){log.debug();}<br>　　　　———————–</p>\n<p>　　　　log4j.appender.appender1 = org.apache.log4j.日志输出到哪儿<br>　　　　　　ConsoleAppender（控制台）<br>　　　　　　FileAppender（文件）<br>　　　　　　DailyRollingFileAppender（每天产生一个日志文件）<br>　　　　　　RollingFileAppender（文件大小到达指定尺寸时产生一个新的文件）<br>　　　　　　WriteAppender（将日志信息以流格式发送到任意指定的地方）<br>　　　　　　JDBCAppender（将日志信息保存到数据库中）<br>　　　　　　log4j.appender.appender1.File=文件目录及文件<br>　　　　    log4j.appender.appender1.MaxFileSize=最大文件大小<br>　　　　    log4j.appender.appender1.MaxBackupIndex=备份文件个数</p>\n<p>　　　　其中，appender1是在第一行定义过的；<br>　　　　文件目录及文件，例如，/home/admin/logs/jar/debug.log<br>    最大文件大小，例如，100KB<br>　　　　备份文件个数，例如，1</p>\n<p>　　　　—————–<br>　　　　log4j.appender.ServerDailyRollingFile.DatePattern=日志后缀格式<br>　　　　例如，’.’yyyy-MM-dd<br>　　　　　　log4j.appender.appender1.layout=org.apache.log4j.日志布局格式<br>　　　　　　HTMLLayout（以HTML表格形式布局）<br>　　　　　　SimpleLayout（包含日志信息的级别和信息字符串）<br>　　　　　　TTCCLayout（包含日志产生的时间，执行绪，类别等信息）<br>　　　　　　PatternLayout（可以灵活的指定布局格式，常用）<br>　　　　——————<br>　　　　log4j.appender.appender1.layout.ConversionPattern=日志输出格式<br>　　　　打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:<br>　　　　例如，%d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n<br>　　　　　　%c 输出日志信息所属的类的全名<br>　　　　　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，<br>        比如：%d{yyy-M-dd HH:mm:ss SSS}，输出类似：2002-10-18 22:10:28,673<br>　　　　　　%f 输出日志信息所属的类的类名<br>　　　　　　%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行<br>　　　　　　%m 输出代码中指定的信息，如log(message)中的message<br>　　　　　　%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”<br>　　　　　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。<br>        如果是调用debug()输出的，则为DEBUG，依此类推<br>　　　　　　%r 输出自应用启动到输出该日志信息所耗费的毫秒数<br>　　　　　　%t 输出产生该日志事件的线程名<br>　　　　　　—————–<br>　　　　　　log4j.appender.ServerDailyRollingFile.Append=true<br>　　　　　　不解释，追加往后写便是<br>　　　　　　总结一下：<br>　　　　　　　　Logger类：完成日志记录，设置日志信息级别<br>　　　　　　　　Appender类：决定日志去向，终端、DB、硬盘<br>　　　　　　　　Layout类：决定日志输出的样式，例如包含当前线程、行号、时间<br>　　　　　　　　——————<br>　　　　　　　　在代码中使用log4j，初始化Logger:<br>　　　　　　　　　　1）在程序中调用BasicConfigurator.configure()方法：<br>            给根记录器增加一个ConsoleAppender，<br>            输出格式通过PatternLayout设为”%-4r [%t] %-5p %c %x - %m%n”，<br>            还有根记录器的默认级别是Level.DEBUG.<br>　　　　　　　　　　2）配置放在文件里，通过命令行参数传递文件名字，<br>            通过PropertyConfigurator.configure(args[x])解析并配置；<br>　　　　　　　　　　3）配置放在文件里，通过环境变量传递文件名等信息，<br>            利用log4j默认的初始化过程解析并配置；<br>　　　　　　　　　　4）配置放在文件里，通过应用服务器配置传递文件名等信息，<br>            利用一个特殊的servlet来完成配置。<br>    　　　　————————————————————————–<br>　　　　　　　　3. 为不同的 Appender 设置日志输出级别：<br>　　　　　　　　　　当调试系统时，我们往往注意的只是异常级别的日志输出，<br>            但是通常所有级别的输出都是放在一个文件里的，<br>            如果日志输出的级别是BUG！？那就慢慢去找吧。<br>　　　　　　　　　　这时我们也许会想要是能把异常信息单独输出到一个文件里该多好啊。<br>            当然可以，Log4j已经提供了这样的功能，我们只需要在配置中修改Appender的<br>        Threshold 就能实现,比如下面的例子：<br>　　　　　　　　[配置文件]<br>　　　　　　　　　　### set log levels ###<br>　　　　　　　　　　log4j.rootLogger = debug , stdout , D , E</p>\n<p>　　　　　　　　　　### 输出到控制台 ###<br>　　　　　　　　　　log4j.appender.stdout = org.apache.log4j.ConsoleAppender<br>　　　　　　　　　　log4j.appender.stdout.Target = System.out<br>　　　　　　　　　　log4j.appender.stdout.layout = org.apache.log4j.PatternLayout<br>　　　　　　　　　　log4j.appender.stdout.layout.ConversionPattern =<br>                %d{ABSOLUTE} %5p %c{ 1 }:%L - %m%n</p>\n<p>　　　　　　　　　　### 输出到日志文件 ###<br>　　　　　　　　　　log4j.appender.D = org.apache.log4j.DailyRollingFileAppender<br>　　　　　　　　　　log4j.appender.D.File = logs/log.log<br>　　　　　　　　　　log4j.appender.D.Append = true<br>　　　　　　　　　　log4j.appender.D.Threshold = DEBUG ## 输出DEBUG级别以上的日志<br>　　　　　　　　　　log4j.appender.D.layout = org.apache.log4j.PatternLayout<br>　　　　　　　　　　log4j.appender.D.layout.ConversionPattern =<br>                %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n</p>\n<p>　　　　　　　　　　### 保存异常信息到单独文件 ###<br>　　　　　　　　　　log4j.appender.D = org.apache.log4j.DailyRollingFileAppender<br>　　　　　　　　　　log4j.appender.D.File = logs/error.log ## 异常日志文件名<br>　　　　　　　　　　log4j.appender.D.Append = true<br>　　　　　　　　　　log4j.appender.D.Threshold = ERROR ## 只输出ERROR级别以上的日志!!!<br>　　　　　　　　　　log4j.appender.D.layout = org.apache.log4j.PatternLayout<br>　　　　　　　　　　log4j.appender.D.layout.ConversionPattern =<br>                %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n</p>\n<p>　　　　　　　　　　[代码中使用]<br>　　　　　　　　　　public class TestLog4j {<br>　　　　　　　　　　　　public static void main(String[] args) {<br>　　　　　　　　　　　　　　PropertyConfigurator.configure( “ D:/Code/conf/log4j.properties “ );<br>　　　　　　　　　　　　　　Logger logger = Logger.getLogger(TestLog4j. class );<br>    　　　　　　　　　　logger.debug( “ debug “ );<br>　　　　　　　　　　　　　　logger.error( “ error “ );<br>　　　　　　　　　　　　}<br>　　　　　　　　　　}<br>　　　　　　———————————————————————————–<br>　　　　　　public class Test {<br>　　　　　　　　private static Logger logger = Logger.getLogger(Test.class);<br>　　　　　　　　public static void main(String[] args) {<br>　　　　　　　　　　// System.out.println(“This is println message.”);</p>\n<p>　　　　　　　　　　// 记录debug级别的信息<br>　　　　　　　　　　logger.debug(“This is debug message.”);<br>　　　　　　　　　　// 记录info级别的信息<br>　　　　　　　　　　ogger.info(“This is info message.”);<br>　　　　　　　　　　// 记录error级别的信息<br>　　　　　　　　　　logger.error(“This is error message.”);<br>　　　　　　　　}<br>　　　　　　}<br>　　　　—————————————————————————–<br>　　　　最后粘上本人用的测试log4j的配置文件内容，仅供参考。希望对您有所帮助<br>　　　　　　log4j.rootLogger=INFO, stdout, file</p>\n<p>　　　　　　log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br>　　　　　　log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br>　　　　　　log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n</p>\n<p>　　　　　　log4j.appender.file=org.apache.log4j.DailyRollingFileAppender<br>　　　　　　log4j.appender.file.Threshold=debug<br>　　　　　　log4j.appender.file.layout=org.apache.log4j.PatternLayout<br>　　　　　　log4j.appender.file.layout.ConversionPattern= %d{yyyy-MM-dd HH:mm:ss SSS} %t %5p %l - %m%n<br>　　　　　　log4j.appender.file.File=D:/others/logs/jar/debug.log<br>　　　　　　#log4j.appender.file.File=/home/test_zzs_dzfp/logs/zzssl/zzssl.log<br>　　　　　　log4j.appender.file.MaxFileSize=200MB<br>　　　　　　log4j.appender.file.MaxBackupIndex=20</p>\n<p>　　　　　　#project defalult level<br>　　　　　　#log4j.logger.hsy.utils=INFO</p>\n"},{"title":"(日志管理-1)关于日志的扯淡","date":"2017-04-26T03:31:25.000Z","_content":"\t待填充\n<!-- more -->\n","source":"_posts/日志管理-1-关于日志的扯淡.md","raw":"---\ntitle: (日志管理-1)关于日志的扯淡\ndate: 2017-04-26 11:31:25\ncategories: 日志管理之美\ntags: log4j,java,日志,logback\n---\n\t待填充\n<!-- more -->\n","slug":"日志管理-1-关于日志的扯淡","published":1,"updated":"2017-04-27T11:45:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k2wdnd0006tgfylu3kx1ec","content":"<pre><code>待填充\n</code></pre><a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<pre><code>待填充\n</code></pre>","more":""},{"title":"(日志管理-3)-logback剖析","date":"2017-04-26T03:43:59.000Z","_content":"\t待填充\n","source":"_posts/日志管理-3-logback剖析.md","raw":"---\ntitle: (日志管理-3)-logback剖析\ndate: 2017-04-26 11:43:59\ncategories: 日志管理之美\ntags: log4j,java,日志,logback\n---\n\t待填充\n","slug":"日志管理-3-logback剖析","published":1,"updated":"2017-04-26T05:03:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k2wdng0007tgfy6hxqjuwy","content":"<pre><code>待填充\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>待填充\n</code></pre>"},{"title":"项目管理-1-maven安装及环境变量配置","date":"2017-04-27T11:01:17.000Z","_content":"\t越来越多的公司启用maven管理公司商业项目，所以maven的学习势在必行。\n<!-- more -->\nMaven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具.\nMaven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的\n可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，\n许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。\n\t本篇介绍macbookpro下安装及配置maven环境变量。\n\t1.下载maven（https://maven.apache.org/download.cgi），并解压到某一个目录，\n如:/Users/heshiyuan/data/devTools/maven/apache-maven-3.3.9\n\t2.打开iterm或者terminal，输入以下命令：\n\t\tvim ~/.bash_profile\n\t3.添加以下几行代码，之后保存并推出:wq\n\t\tMAVEN_HOME=/Users/heshiyuan/data/devTools/maven/apache-maven-3.3.9\n\t\tPATH=$MAVEN_HOME/bin:$PATH\n\t\texport MAVEN_HOME\n\t\texport PATH\n\t4.输入以下命令使.bash_profile生效\n\t\tsource ~/.bash_profile\n\t5.输入mvn -version查看是否成功\n\t6.如果未安装成功，检查是否先设置了java环境变量\n\t\tJAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home\n\t\tPATH=$JAVA_HOME/bin:$PATH\n\t\texport JAVA_HOME\n\t\texport PATH\n\t如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！\n","source":"_posts/项目管理-1-maven安装及环境变量配置.md","raw":"---\ntitle: 项目管理-1-maven安装及环境变量配置\ndate: 2017-04-27 19:01:17\ntags: maven,项目管理,mac\ncategories: 项目管理利器-maven\n---\n\t越来越多的公司启用maven管理公司商业项目，所以maven的学习势在必行。\n<!-- more -->\nMaven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具.\nMaven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的\n可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，\n许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。\n\t本篇介绍macbookpro下安装及配置maven环境变量。\n\t1.下载maven（https://maven.apache.org/download.cgi），并解压到某一个目录，\n如:/Users/heshiyuan/data/devTools/maven/apache-maven-3.3.9\n\t2.打开iterm或者terminal，输入以下命令：\n\t\tvim ~/.bash_profile\n\t3.添加以下几行代码，之后保存并推出:wq\n\t\tMAVEN_HOME=/Users/heshiyuan/data/devTools/maven/apache-maven-3.3.9\n\t\tPATH=$MAVEN_HOME/bin:$PATH\n\t\texport MAVEN_HOME\n\t\texport PATH\n\t4.输入以下命令使.bash_profile生效\n\t\tsource ~/.bash_profile\n\t5.输入mvn -version查看是否成功\n\t6.如果未安装成功，检查是否先设置了java环境变量\n\t\tJAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home\n\t\tPATH=$JAVA_HOME/bin:$PATH\n\t\texport JAVA_HOME\n\t\texport PATH\n\t如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！\n","slug":"项目管理-1-maven安装及环境变量配置","published":1,"updated":"2017-04-27T11:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k2wdnj0008tgfyh4lt7tqa","content":"<pre><code>越来越多的公司启用maven管理公司商业项目，所以maven的学习势在必行。\n</code></pre><a id=\"more\"></a>\n<p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具.<br>Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的<br>可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，<br>许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。<br>    本篇介绍macbookpro下安装及配置maven环境变量。<br>    1.下载maven（<a href=\"https://maven.apache.org/download.cgi），并解压到某一个目录，\" target=\"_blank\" rel=\"external\">https://maven.apache.org/download.cgi），并解压到某一个目录，</a><br>如:/Users/heshiyuan/data/devTools/maven/apache-maven-3.3.9<br>    2.打开iterm或者terminal，输入以下命令：<br>        vim ~/.bash_profile<br>    3.添加以下几行代码，之后保存并推出:wq<br>        MAVEN_HOME=/Users/heshiyuan/data/devTools/maven/apache-maven-3.3.9<br>        PATH=$MAVEN_HOME/bin:$PATH<br>        export MAVEN_HOME<br>        export PATH<br>    4.输入以下命令使.bash_profile生效<br>        source ~/.bash_profile<br>    5.输入mvn -version查看是否成功<br>    6.如果未安装成功，检查是否先设置了java环境变量<br>        JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home<br>        PATH=$JAVA_HOME/bin:$PATH<br>        export JAVA_HOME<br>        export PATH<br>    如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！</p>\n","site":{"data":{}},"excerpt":"<pre><code>越来越多的公司启用maven管理公司商业项目，所以maven的学习势在必行。\n</code></pre>","more":"<p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具.<br>Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的<br>可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，<br>许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。<br>    本篇介绍macbookpro下安装及配置maven环境变量。<br>    1.下载maven（<a href=\"https://maven.apache.org/download.cgi），并解压到某一个目录，\">https://maven.apache.org/download.cgi），并解压到某一个目录，</a><br>如:/Users/heshiyuan/data/devTools/maven/apache-maven-3.3.9<br>    2.打开iterm或者terminal，输入以下命令：<br>        vim ~/.bash_profile<br>    3.添加以下几行代码，之后保存并推出:wq<br>        MAVEN_HOME=/Users/heshiyuan/data/devTools/maven/apache-maven-3.3.9<br>        PATH=$MAVEN_HOME/bin:$PATH<br>        export MAVEN_HOME<br>        export PATH<br>    4.输入以下命令使.bash_profile生效<br>        source ~/.bash_profile<br>    5.输入mvn -version查看是否成功<br>    6.如果未安装成功，检查是否先设置了java环境变量<br>        JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home<br>        PATH=$JAVA_HOME/bin:$PATH<br>        export JAVA_HOME<br>        export PATH<br>    如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj2k2wdn10000tgfy8pqphdo5","category_id":"cj2k2wdnb0004tgfyj4hdvvjj","_id":"cj2k2wdnp000ctgfyyauv9ccc"},{"post_id":"cj2k2wdn70002tgfybwyq4niz","category_id":"cj2k2wdnm0009tgfylb3x899b","_id":"cj2k2wdnr000gtgfyzyr55je7"},{"post_id":"cj2k2wdnd0006tgfylu3kx1ec","category_id":"cj2k2wdnm0009tgfylb3x899b","_id":"cj2k2wdns000ktgfy3084wgn5"},{"post_id":"cj2k2wdng0007tgfy6hxqjuwy","category_id":"cj2k2wdnm0009tgfylb3x899b","_id":"cj2k2wdnu000otgfyw1ki9cft"},{"post_id":"cj2k2wdnj0008tgfyh4lt7tqa","category_id":"cj2k2wdnt000ltgfyxv3fopr9","_id":"cj2k2wdnx000qtgfyz3ec1qrs"}],"PostTag":[{"post_id":"cj2k2wdn10000tgfy8pqphdo5","tag_id":"cj2k2wdnc0005tgfywo7fuy69","_id":"cj2k2wdnn000btgfyelz4zduw"},{"post_id":"cj2k2wdn70002tgfybwyq4niz","tag_id":"cj2k2wdnn000atgfyg7gkwnh1","_id":"cj2k2wdnr000ftgfypr771xc4"},{"post_id":"cj2k2wdnd0006tgfylu3kx1ec","tag_id":"cj2k2wdnn000atgfyg7gkwnh1","_id":"cj2k2wdns000jtgfyp6228j05"},{"post_id":"cj2k2wdng0007tgfy6hxqjuwy","tag_id":"cj2k2wdnn000atgfyg7gkwnh1","_id":"cj2k2wdnt000ntgfyjdlgpkow"},{"post_id":"cj2k2wdnj0008tgfyh4lt7tqa","tag_id":"cj2k2wdnt000mtgfy1li3bu5r","_id":"cj2k2wdnv000ptgfyppybs91t"}],"Tag":[{"name":"java","_id":"cj2k2wdnc0005tgfywo7fuy69"},{"name":"log4j,java,日志,logback","_id":"cj2k2wdnn000atgfyg7gkwnh1"},{"name":"maven,项目管理,mac","_id":"cj2k2wdnt000mtgfy1li3bu5r"}]}}
>>>>>>> e1a990fbb5a99de3d1a679a1b7167712409db834
